<template class="task-template">
    <section id="hosthook-section" class="section js-section u-category-communication">
        <header class="communication">
            <div class="section-wrapper">
                <h1>
                    <svg class="section-icon"><use xlink:href="assets/img/icons.svg#icon-communication"></use></svg>
                    执行自己的TypeScript代码
                </h1>
                <h3><code>HostHook</code>的API允许您在主机进程上执行自己的JavaScript/TypeScript代码.</h3>
                <p>首先使用以下命令通过Electron.NET CLI创建Electron hosthook目录：<code>electronize add hosthook</code>.</p>
                <p>在这个目录中，您可以安装任何NPM包并嵌入您自己的JavaScript/TypeScript代码。也可以响应主机进程中的事件.</p>
                <p>您可以在<code>Controllers\HostHookController.cs</code>和<code>ElectronHostHook</code>文件夹中找到示例源代码.</p>
            </div>
        </header>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="async-msg-demo-toggle" class="js-container-target demo-toggle-button">
                    执行 TypeScript 代码
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="start-hoosthook-button">创建Excel文件</button>
                        <span class="demo-response" id="hoosthook-reply"></span>
                    </div>
                    <p>使用<code>Electron.HostHook.CallAsync</code>异步执行您自己的JavaScript/TypeScript代码，该代码需要一个结果值.</p>

                    <p>这个例子执行TypeScript代码，监听“create-excel”。TypeScript代码使用一个名为exceljs的NPM包来创建一个Excel文件并回复一条成功消息.</p>

                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">Electron.IpcMain.On("start-hoosthook", async (args) =>
{
    var mainWindow = Electron.WindowManager.BrowserWindows.First();
    var options = new OpenDialogOptions
    {
        Properties = new OpenDialogProperty[]
        {
            OpenDialogProperty.openDirectory
        }
    };
    var folderPath = await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options);

    var resultFromTypeScript = await Electron.HostHook.CallAsync<string>("create-excel-file", folderPath);
    Electron.IpcMain.Send(mainWindow, "excel-file-created", resultFromTypeScript);
});</code>
                    </pre>
                    <h5>index.ts from ElectronHostHook-Folder (TypeScript)</h5>
                    <pre>
                    <code class="typescript">
                            import * as Electron from "electron";
                            import { Connector } from "./connector";
                            import { ExcelCreator } from "./excelCreator";

                            export class HookService extends Connector {
                            constructor(socket: SocketIO.Socket, public app: Electron.App) {
                            super(socket, app);
                            }

                            onHostReady(): void {
                            // 在这里执行您自己的JavaScript业务逻辑
                            this.on("create-excel", async (path, done) => {
                            const excelCreator: ExcelCreator = new ExcelCreator();
                            const result: string = await excelCreator.create(path);

                            done(result);
                            });
                            }
                            }
                        </code>
                    </pre>
                </div>
            </div>
        </div>

        <script>
            (function () {
                const { ipcRenderer } = require("electron");

                document.getElementById("start-hoosthook-button").addEventListener("click", () => {
                    ipcRenderer.send("start-hoosthook");
                });

                ipcRenderer.on('excel-file-created', (event, arg) => {
                    const message = `Asynchronous message reply: ${arg}`;
                    document.getElementById('hoosthook-reply').innerHTML = message;
                });
            }());
        </script>

    </section>
</template>
