<template class="task-template">
    <section id="app-sys-information-section" class="section js-section u-category-system">
        <header class="section-header">
            <div class="section-wrapper">
                <h1>
                    <svg class="section-icon"><use xlink:href="assets/img/icons.svg#icon-system"></use></svg>
                    获取应用和系统信息
                </h1>
                <h3>使用Electron.NET，您可以收集有关用户系统、应用程序或屏幕的信息.</h3>
                
                <p>您可以在<code>Controllers\AppSysInformationController.cs</code>中找到示例源代码.</p>
            </div>
        </header>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="app-info-demo-toggle" class="js-container-target demo-toggle-button">
                    获取应用信息
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="app-info">查看示例</button>
                        <span class="demo-response" id="got-app-info"></span>
                    </div>
                    <p>主进程的 <code>Electron.App</code> 模块可用于获取应用程序在用户计算机上的位置.</p>
                    <p>在本例中，为了从渲染进程获取信息，我们使用<code>ipcRenderer</code>向主进程发送一条消息，请求应用程序的路径.</p>
                    <h5>渲染进程 (JavaScript)</h5>
                    <pre><code class="javascript">const { ipcRenderer } = require("electron");

document.getElementById("app-info").addEventListener("click", () => {
    ipcRenderer.send("app-info");
});

ipcRenderer.on("got-app-path", (event, path) => {
    const message = `This app is located at: ${path}`;
    document.getElementById('got-app-info').innerHTML = message
});</code></pre>
                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">Electron.IpcMain.On("app-info", async (args) => 
{
    string appPath = await Electron.App.GetAppPathAsync();

    var mainWindow = Electron.WindowManager.BrowserWindows.First();
    Electron.IpcMain.Send(mainWindow, "got-app-path", appPath);
});</code></pre>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="app-version-demo-toggle" class="js-container-target demo-toggle-button">
                    获取版本信息
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Both</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="version-info">查看示例</button>
                        <span class="demo-response" id="got-version-info"></span>
                    </div>
                    <p><code>process</code>模块内置在Node.js中（因此您可以在渲染进程中使用它），在Electron.NET应用程序中，这个对象有一些更有用的属性.</p>
                    <p>下面的示例获取应用程序正在使用的Electron版本.</p>
                    <p>有关详细信息，请参阅<a href="http://electron.atom.io/docs/api/process">进程文档<span>（在新窗口中打开）</span></a>.</p>
                    <h5>渲染进程 (JavaScript)</h5>
                    <pre><code class="javascript">document.getElementById('version-info').addEventListener('click', () => {
    const electronVersion = process.versions.electron;
    const message = `This app is using Electron version: ${electronVersion}`;
    document.getElementById('got-version-info').innerHTML = message;
});</code></pre>

                    <div class="demo-高级技巧">
                        <h2>高级技巧</h2>
                        <strong>查找Chromium、Node.js和V8的版本.</strong>
                        <p>Electron还包括<code>process.versions</code>对象中Chromium、Node.js和V8的版本。您可以通过在Electron应用程序中打开开发人员工具并键入<code>process.versions</code>来快速实现。</p>
                        <pre><code class="language-js">
    // 返回正在使用的 Chromium 版本
    process.versions.chrome
    // 返回正在使用的 V8 版本
    process.versions.v8
    // 返回正在使用的 Node 版本
    process.versions.node
</code></pre>
                    </div>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="sys-info-demo-toggle" class="js-container-target demo-toggle-button">
                    获取系统信息
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Both</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="sys-info">查看示例</button>
                        <span class="demo-response" id="got-sys-info"></span>
                    </div>
                    <p>在下面的示例中, 我们通过模块返回主目录的位置.</p>

                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">Electron.IpcMain.On("sys-info", async (args) =>
{
    string homePath = await Electron.App.GetPathAsync(PathName.home);

    var mainWindow = Electron.WindowManager.BrowserWindows.First();
    Electron.IpcMain.Send(mainWindow, "got-sys-info", homePath);
});</code></pre>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="screen-info-demo-toggle" class="js-container-target demo-toggle-button">
                    获取屏幕信息
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Both</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="screen-info">查看示例</button>
                        <span class="demo-response" id="got-screen-info"></span>
                    </div>
                    <p>Electron 的<code>Electron.Screen</code>模块可以获取有关屏幕大小, 显示, 光标位置等信息. 在下面的示例中, 我们将获取所使用的显示器的尺寸.</p>
                    <p>在浏览器中查看 <a href="http://electron.atom.io/docs/api/screen">完整 screen 文档<span class="u-visible-to-screen-reader">(在新窗口中打开)</span></a>.</p>
                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">Electron.IpcMain.On("screen-info", async (args) =>
{
    var display = await Electron.Screen.GetPrimaryDisplayAsync();

    var mainWindow = Electron.WindowManager.BrowserWindows.First();
    Electron.IpcMain.Send(mainWindow, "got-screen-info", display.Size);
});</code></pre>

                    <div class="demo-高级技巧">
                        <h2>高级技巧</h2>
                        <strong>尺寸差异.</strong>
                        <p>示例中的 <code>.Size</code>方法返回屏幕的原始尺寸, 但由于系统菜单栏, 这可能不是您的应用程序的实际可用空间.</p>
                        <p>要获取可用屏幕空间的大小, 请使用 <code>.WorkAreaSize</code> 方法. 而使用 <code>.workArea</code> 方法将返回坐标以及可用屏幕空间的尺寸.</p>
                    </div>
                </div>
            </div>
        </div>

        <script>
            (function(){
                const { ipcRenderer } = require("electron");
                
                document.getElementById("app-info").addEventListener("click", () => {
                    ipcRenderer.send("app-info");
                });

                ipcRenderer.on("got-app-path", (event, path) => {
                    const message = `This app is located at: ${path}`;
                    document.getElementById('got-app-info').innerHTML = message;
                });

                document.getElementById('version-info').addEventListener('click', () => {
                    const electronVersion = process.versions.electron;
                    const message = `This app is using Electron version: ${electronVersion}`;
                    document.getElementById('got-version-info').innerHTML = message;
                });

                document.getElementById('sys-info').addEventListener('click', () => {
                    ipcRenderer.send("sys-info");
                });

                ipcRenderer.on("got-sys-info", (event, homeDir) => {
                    const message = `Your system home directory is: ${homeDir}`;
                    document.getElementById('got-sys-info').innerHTML = message;
                });

                document.getElementById("screen-info").addEventListener("click", () => {
                    ipcRenderer.send("screen-info");
                });
                
                ipcRenderer.on("got-screen-info", (event, size) => {
                     const message = `Your screen is: ${size.width}px x ${size.height}px`;
                     document.getElementById('got-screen-info').innerHTML = message;
                });

            }());
        </script>

    </section>
</template>
