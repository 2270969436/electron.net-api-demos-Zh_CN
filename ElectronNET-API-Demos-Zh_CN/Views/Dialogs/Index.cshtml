<template class="task-template">
    <section id="dialogs-section" class="section js-section u-category-native-ui">
        <header class="section-header">
            <div class="section-wrapper">
                <h1>
                    <svg class="section-icon"><use xlink:href="assets/img/icons.svg#icon-native-ui"></use></svg>
                    使用系统对话框
                </h1>
                <h3>Electron.NET中的<code>Electron.Dialog</code>允许您使用本机系统对话框打开文件或目录、保存文件或显示信息性消息.</h3>

                <p>这是一个主进程模块，因为这个进程对于本机实用程序更有效，并且它允许调用在不中断页面呈现程序进程中的可见元素的情况下进行.</p>

                <p>您可以在<code>Controllers\DialogsController.cs</code>中找到示例源代码.</p>
            </div>
        </header>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="open-file-demo-toggle" class="js-container-target demo-toggle-button">
                    打开文件或目录
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="select-directory">查看示例</button>
                        <span class="demo-response" id="selected-file"></span>
                    </div>
                    在本演示中，<code>ipcRenderer</code>用于从呈现程序进程发送消息，指示主进程启动打开文件（或目录）对话框。如果选择了一个文件，主进程可以将该信息发送回渲染器进程
                    <h5>渲染进程 (JavaScript)</h5>
                    <pre><code class="language-js">const { ipcRenderer } = require("electron");

document.getElementById("select-directory").addEventListener("click", () => {
    ipcRenderer.send("select-directory");
});

ipcRenderer.on("select-directory-reply", (sender, path) => {
    document.getElementById("selected-file").innerText = `You selected: ${path}`;;
});</code></pre>
                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">Electron.IpcMain.On("select-directory", async (args) => {
    var mainWindow = Electron.WindowManager.BrowserWindows.First();
    var options = new OpenDialogOptions {
        Properties = new OpenDialogProperty[] {
            OpenDialogProperty.openFile,
            OpenDialogProperty.openDirectory
        }
    };

    string[] files = await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options);
    Electron.IpcMain.Send(mainWindow, "select-directory-reply", files);
});</code></pre>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="error-dialog-demo-toggle" class="js-container-target demo-toggle-button">
                    错误对话框
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button id="error-dialog" class="demo-button">查看示例</button>
                    </div>
                    <p>在本演示中，<code>ipcRenderer</code>用于从呈现程序进程发送一条消息，指示主进程启动错误对话框</p>

                    <h5>渲染进程 (JavaScript)</h5>
                    <pre><code class="language-js">const { ipcRenderer } = require("electron");

document.getElementById("error-dialog").addEventListener("click", () => {
    ipcRenderer.send("error-dialog");
});</code></pre>
                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">Electron.IpcMain.On("error-dialog", (args) =>
{
    Electron.Dialog.ShowErrorBox("An Error Message", "Demonstrating an error message.");
});</code></pre>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="information-dialog-demo-toggle" class="js-container-target demo-toggle-button">
                    信息对话框
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="information-dialog">查看示例</button>
                        <span class="demo-response" id="info-selection"></span>
                    </div>
                    <p>在本演示中，<code>ipcRenderer</code>用于从渲染进程发送消息，指示主进程启动信息对话框。可以为响应提供选项，然后将响应转发回渲染进程</p>

                    <p>注意：macOS中不显示<code>标题</code>属性.</p>

                    <p>信息对话框可以包含图标、按钮选择、标题和消息.</p>
                    <h5>渲染进程 (JavaScript)</h5>
                    <pre><code class="javascript">document.getElementById("information-dialog").addEventListener("click", () => {
    ipcRenderer.send("information-dialog");
});

ipcRenderer.on("information-dialog-reply", (sender, index) => {
    let message = 'You selected ';

    if(index == 0) {
        message += 'yes.'
    } else {
        message += 'no.'
    }

    document.getElementById("info-selection").innerText = message;
});</code></pre>
                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">Electron.IpcMain.On("information-dialog", async (args) =>
{
    var options = new MessageBoxOptions("This is an information dialog. Isn't it nice?")
    {
        Type = MessageBoxType.info,
        Title = "Information",
        Buttons = new string[] { "Yes", "No" }
    };

    var result = await Electron.Dialog.ShowMessageBoxAsync(options);

    var mainWindow = Electron.WindowManager.BrowserWindows.First();
    Electron.IpcMain.Send(mainWindow, "information-dialog-reply", result.Response);
});</code></pre>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="save-dialog-demo-toggle" class="js-container-target demo-toggle-button">
                    保存对话框
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="save-dialog">查看示例</button>
                        <span class="demo-response" id="file-saved"></span>
                    </div>
                    <p>在本演示中，<code>ipcRenderer</code>用于从渲染进程发送消息，指示主进程启动保存对话框。它返回用户选择的路径，该路径可以转发回渲染进程</p>
                    <h5>渲染进程 (JavaScript)</h5>
                    <pre><code class="javascript">const { ipcRenderer } = require("electron");

document.getElementById("save-dialog").addEventListener("click", () => {
    ipcRenderer.send("save-dialog");
});

ipcRenderer.on("save-dialog-reply", (sender, path) => {
    if (!path) path = 'No path';
    document.getElementById('file-saved').innerHTML = `Path selected: ${path}`;
});</code></pre>
                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">Electron.IpcMain.On("save-dialog", async (args) =>
{
    var mainWindow = Electron.WindowManager.BrowserWindows.First();
    var options = new SaveDialogOptions
    {
        Title = "Save an Image",
        Filters = new FileFilter[]
        {
            new FileFilter { Name = "Images", Extensions = new string[] {"jpg", "png", "gif" } }
        }
    };

    var result = await Electron.Dialog.ShowSaveDialogAsync(mainWindow, options);
    Electron.IpcMain.Send(mainWindow, "save-dialog-reply", result);
});</code></pre>
                </div>
            </div>
        </div>

        <script>
            (function () {
                const { ipcRenderer } = require("electron");

                document.getElementById("select-directory").addEventListener("click", () => {
                    ipcRenderer.send("select-directory");
                });

                ipcRenderer.on("select-directory-reply", (sender, path) => {
                    document.getElementById("selected-file").innerText = `You selected: ${path}`;
                });

                document.getElementById("error-dialog").addEventListener("click", () => {
                    ipcRenderer.send("error-dialog");
                });

                document.getElementById("information-dialog").addEventListener("click", () => {
                    ipcRenderer.send("information-dialog");
                });

                ipcRenderer.on("information-dialog-reply", (sender, index) => {
                    let message = 'You selected ';

                    if (index == 0) {
                        message += 'yes.'
                    } else {
                        message += 'no.'
                    }

                    document.getElementById("info-selection").innerText = message;
                });

                document.getElementById("save-dialog").addEventListener("click", () => {
                    ipcRenderer.send("save-dialog");
                });

                ipcRenderer.on("save-dialog-reply", (sender, path) => {
                    if (!path) path = 'No path';
                    document.getElementById('file-saved').innerHTML = `Path selected: ${path}`;
                });

            }());
        </script>

    </section>
</template>
