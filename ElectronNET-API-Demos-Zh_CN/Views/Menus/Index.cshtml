<template class="task-template">
    <section id="menus-section" class="section js-section u-category-menu">
        <header class="section-header">
            <div class="section-wrapper">
                <h1>
                    <svg class="section-icon"><use xlink:href="assets/img/icons.svg#icon-menu"></use></svg>
                    自定义菜单
                </h1>
                <h3>使用 <code>Electron.Menu</code> 和 <code>MenuItem</code> 模块可用于创建自定义本地菜单.</h3>

                <p>有两种菜单: 应用程序（顶部）菜单和上下文（右键单击）菜单.</p>

                <p>您可以在<code>Controllers\MenusController.cs</code>中找到示例源代码.</p>
            </div>
        </header>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="application-menu-demo-toggle" class="js-container-target demo-toggle-button">
                    创建应用程序菜单
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Main</div>
                </button>
                <div class="demo-box">
                    <p>使用 <code>Electron.Menu</code> 和 <code>MenuItem</code> 模块可以自定义你的应用程序菜单. 如果没有设置任何菜单, Electron 将为您的应用默认生成一个最小的菜单.</p>

                    <p>此应用程序使用下面的代码设置应用程序菜单. 如果您点击应用程序菜单中的 "查看" 选项, 然后点击 "应用程序菜单演示", 则会显示一个信息框.</p>
                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">
    var menu = new MenuItem[] {
    new MenuItem { Label = "Edit", Submenu = new MenuItem[] {
    new MenuItem { Label = "Undo", Accelerator = "CmdOrCtrl+Z", Role = MenuRole.undo },
    new MenuItem { Label = "Redo", Accelerator = "Shift+CmdOrCtrl+Z", Role = MenuRole.redo },
    new MenuItem { Type = MenuType.separator },
    new MenuItem { Label = "Cut", Accelerator = "CmdOrCtrl+X", Role = MenuRole.cut },
    new MenuItem { Label = "Copy", Accelerator = "CmdOrCtrl+C", Role = MenuRole.copy },
    new MenuItem { Label = "Paste", Accelerator = "CmdOrCtrl+V", Role = MenuRole.paste },
    new MenuItem { Label = "Select All", Accelerator = "CmdOrCtrl+A", Role = MenuRole.selectall }
    }
    },
    new MenuItem { Label = "View", Submenu = new MenuItem[] {
    new MenuItem
    {
    Label = "Reload",
    Accelerator = "CmdOrCtrl+R",
    Click = () =>
    {
    // 重新加载时，重新启动并关闭所有旧的
    // 打开辅助窗口
    Electron.WindowManager.BrowserWindows.ToList().ForEach(browserWindow => {
    if(browserWindow.Id != 1)
    {
    browserWindow.Close();
    }
    else
    {
    browserWindow.Reload();
    }
    });
    }
    },
    new MenuItem
    {
    Label = "Toggle Full Screen",
    Accelerator = "CmdOrCtrl+F",
    Click = async () =>
    {
    bool isFullScreen = await Electron.WindowManager.BrowserWindows.First().IsFullScreenAsync();
    Electron.WindowManager.BrowserWindows.First().SetFullScreen(!isFullScreen);
    }
    },
    new MenuItem
    {
    Label = "Open Developer Tools",
    Accelerator = "CmdOrCtrl+I",
    Click = () => Electron.WindowManager.BrowserWindows.First().WebContents.OpenDevTools()
    },
    new MenuItem
    {
    Type = MenuType.separator
    },
    new MenuItem
    {
    Label = "App Menu Demo",
    Click = async () => {
    var options = new MessageBoxOptions("This demo is for the Menu section, showing how to create a clickable menu item in the application menu.");
    options.Type = MessageBoxType.info;
    options.Title = "Application Menu Demo";
    await Electron.Dialog.ShowMessageBoxAsync(options);
    }
    }
    }
    },
    new MenuItem { Label = "Window", Role = MenuRole.window, Submenu = new MenuItem[] {
    new MenuItem { Label = "Minimize", Accelerator = "CmdOrCtrl+M", Role = MenuRole.minimize },
    new MenuItem { Label = "Close", Accelerator = "CmdOrCtrl+W", Role = MenuRole.close }
    }
    },
    new MenuItem { Label = "Help", Role = MenuRole.help, Submenu = new MenuItem[] {
    new MenuItem
    {
    Label = "Learn More",
    Click = async () => await Electron.Shell.OpenExternalAsync("https://github.com/ElectronNET")
    }
    }
    }
    };

    Electron.Menu.SetApplicationMenu(menu);
</code></pre>

                    <div class="demo-高级技巧">
                        <h2>高级技巧</h2>
                        <strong>了解操作系统菜单的差异.</strong>
                        <p>在为多个操作系统设计应用程序时, 请务必注意应用程序菜单在每个操作系统上的不同约定之处。</p>
                        <p>例如, 在 Windows 上, 加速器设置为 <code>&</code> . 命名约定也有所不同, 如 "设置" 或 "首选项". 下面是学习操作系统特定标准的资源:</p>
                        <ul>
                            <li><a href="https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/OSXHIGuidelines/MenuBarMenus.html#//apple_ref/doc/uid/20000957-CH29-SW1">macOS<span class="u-visible-to-screen-reader">(在新窗口中打开)</span></a></li>
                            <li><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb226797(v=vs.85).aspx">Windows<span class="u-visible-to-screen-reader">(在新窗口中打开)</span></a></li>
                            <li><a href="https://developer.gnome.org/hig/stable/menu-bars.html.en">Linux<span class="u-visible-to-screen-reader">(在新窗口中打开)</span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

        <div class="demo">
            <div class="demo-wrapper">
                <button id="context-menu-demo-toggle" class="js-container-target demo-toggle-button">
                    创建上下文菜单
                    <div class="demo-meta u-avoid-clicks">支持: Win, macOS, Linux <span class="demo-meta-divider">|</span> 进程: Main</div>
                </button>
                <div class="demo-box">
                    <div class="demo-controls">
                        <button class="demo-button" id="context-menu">查看示例</button>
                    </div>
                    <p>还可以使用<code>Electron.menu.SetContextMenu()</code>和<code>MenuItem</code>创建上下文菜单或右键单击菜单。您可以右键单击此应用程序中的任何位置，或单击演示按钮以查看示例上下文菜单</p>
                    <p>在这个示例中, 我们使用 <code>ipcRenderer</code> 模块来展示从渲染器进程显式调用它时的上下文菜单.</p>
                    <p>有关所有可用的属性请查看 <a href="http://electron.atom.io/docs/api/web-contents/#event-context-menu">上下文菜单事件文档</a>.</p>
                    <h5>主进程 (C#)</h5>
                    <pre><code class="csharp">var menu = new MenuItem[]
{
    new MenuItem
    {
        Label = "Hello",
        Click = async () => await Electron.Dialog.ShowMessageBoxAsync("Electron.NET rocks!")
    },
    new MenuItem { Type = MenuType.separator },
    new MenuItem { Label = "Electron.NET", Type = MenuType.checkbox, Checked = true }
};

var mainWindow = Electron.WindowManager.BrowserWindows.First();
Electron.Menu.SetContextMenu(mainWindow, menu);

Electron.IpcMain.On("show-context-menu", (args) => {
    Electron.Menu.ContextMenuPopup(mainWindow);
});</code></pre>
                    <h5>渲染进程 (JavaScript)</h5>
                    <pre><code class="javascript">const { ipcRenderer } = require("electron");

window.addEventListener('contextmenu', (e) => {
    e.preventDefault()
    ipcRenderer.send('show-context-menu');
}, false);</code></pre>
                </div>
            </div>
        </div>

        <script type="text/javascript">
            (function () {
                const { ipcRenderer } = require("electron");

                const contextMenuBtn = document.getElementById('context-menu')
                contextMenuBtn.addEventListener('click', function () {
                    ipcRenderer.send('show-context-menu');
                })

                window.addEventListener('contextmenu', (e) => {
                    e.preventDefault()
                    ipcRenderer.send('show-context-menu');
                }, false);

            }());
        </script>

    </section>
</template>
